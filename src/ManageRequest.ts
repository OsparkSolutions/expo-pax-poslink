import { requireNativeModule } from 'expo-modules-core';
import NativeObject from './NativeObject';

// It loads the native module object from the JSI or falls back to
// the bridge module (from NativeModulesProxy) if the remote debugger is on.
const mod = requireNativeModule('ManageRequest');
export enum TransType {
    INIT = 1,//This command is use to initialize PAX terminal. PAX terminal will do internal test/check and init the terminal for transactions. If terminal doesn't receive this command after install, the idle menu will display the "disMsg", when terminal receives this command, the idle menu will display the "ildeMsg"
    GETVAR = 2,//This command is used to get the control variable and configure parameter in the terminal. See Configurable Parameter Definition for definition.
    SETVAR = 3,//This command is used to set the control variable and configure parameter in the terminal. See Configurable Parameter Definition for definition.
    SHOWDIALOG = 4,//Show a half screen with title and buttons. It is supported by MT30 but it is not supported by SP30.
    GETSIGNATURE = 5,//This command is used to get the signature image file in the terminal. MT30 supports it.
    SHOWMESSAGE = 6,//Terminal can display 5 line messages, if no clear message received. If terminal received the sixth line message, terminal only displayed the last 5 line messages.
    CLEARMESSAGE = 7,//Clear the message buffer on terminal, if terminal receives this command, and then receives the show message command, the terminal only displays the message getting from the show message command.
    RESET = 8,//Reset the terminal to idle state .
    UPDATEIMAGE = 9,//Used to update image to POS .(Deprecated since V1.05.01. Please use UPDATERESOURCE instead)
    DOSIGNATURE = 10,//Used to do signature with POS directly.
    DELETEIMAGE = 11,//Used to delete the POS idle image as image name.
    SHOWTHANKYOU = 12,//Used to show message center aligned which defaults to.(Deprecated since V1.11.00. Please use SHOWMESSAGECENTER instead) the screen as "Thanks You".
    REBOOT = 13,//Used to reboot the terminal.
    GETPINBLOCK = 14,//Used to input PIN and get PINBLOCK back.
    INPUTACCOUNT = 15,//Used to get account input.
    RESETMSR = 16,//Used to reset MSR buffer.
    INPUTTEXT = 17,//Used to get text input.
    CHECKFILE = 18,//Used to check file existence.
    AUTHORIZECARD = 19,//Used to authorize contact EMV card.
    COMPLETEONLINEEMV = 20,//Used to complete the online authorized EMV transaction.
    REMOVECARD = 21,//Used to prompt cardholder to remove card.
    GETEMVTLVDATA = 22,//Used to get EMV TLV data from terminal.
    SETEMVTLVDATA = 23,//Used to set EMV TLV data from terminal.
    INPUTACCOUNTWITHEMV = 24,//Used to get account input with EMV card support.
    COMPLETECONTACTLESSEMV = 25,//Used to complete the contactless EMV transaction if there's any issuer authentication data or issuer script contained in the host authorization response message.(deprecated since V1.02.00)
    SETSAFPARAMETERS = 26,// This command is used for setting the store and forward (SAF) related parameters.
    SHOWTEXTBOX = 27,// This command is used for showing a text box on terminal.
    REPRINT = 28,// Used to print the last receipt or any receipt.
    PRINTER = 29,// Used to print the receipt refer to the data generated by POS system.
    SHOWITEM = 30, //– Used to display itemized product info, Similar logic as the SHOWMESSAGE.
    CARDINSERTDETECTION = 31,// – Used to check card whether be inserted in terminal card slot An Error will be returned while invoking POSLink.ProcessTrans if user set other value.
    TOKENADMINISTRATIVE = 32,// It is used to do token administration with depending on hosts.
    SHOWDIALOGFORM = 33, //– Show a dialog form to allow user to do single or multiple selection.
    CAMERASCAN = 34,// – Use camera to scan barcode and QRCode
    VASSETMERCHANTPARAMETERS = 35,// This command is used to configure the parameters of Apple VAS or Google SmartTap.
    VASPUSHDATA = 36,// This command is used to configure the parameters of Google SmartTap to push data from terminal to mobile, such as merchant info.
    MIFARECARD = 37,// M1 Card
    GETSAFPARAMETERS = 38,// GetSAFParameter
    UPLOADFTP = 39,// Upload FTP
    SESSIONKEYINJECTION = 40,// Session Key Injection
    MACCALCULATION = 41,// MAC Calculation
    GETPEDINFORMATION = 42,// Get PED Information
    UPDATERESOURCE = 43,//Used to update resource, detail content depends on FileType .
    INCREASEKSN = 44,// This command is used to get increase KSN.
    SHOWMESSAGECENTER = 45,//Used to show message center aligned which defaults to.
    CUSTOMDATAENCRYPTION = 46,//This command is used to encrypt custom data. User can assign 
}

export enum EDCType {
    ALL = 0,
    CREDIT = 1,
    DEBIT = 2,
    CHECK = 3,
    EBT = 4,
    GIFT = 5,
    LOYALTY = 6,
    CASH = 7
}
export enum PaymentTransType {
    // Ask the terminal to select transaction type
    UNKNOWN = 0,

    // Verify/Authorize a payment. Do not put into the batch.
    AUTH = 1,

    // Authorizes the funds on the card and flags the transaction to be captured for settlement at the next settlement time.
    SALE = 2,

    // Returns payment amount to the card open to buy.
    RETURN = 3,

    // Void/Reverse a transaction from an unsettled batch.
    VOID = 4,

    // Completes an Authorization Only transaction.
    POSTAUTH = 5,

    // Forces a transaction into an open batch. Typically used for voice authorizations.
    FORCEAUTH = 6,

    // Capture transaction, typically used for settlement.
    CAPTURE = 7,

    // Performs a repeat sale using the PnRef on a previously processed card.
    REPEATSALE = 8,

    // Performs a settlement or batch close.
    CAPTUREALL = 9,

    // Used for additional charges or gratuity, typically for tip adjustment.
    ADJUST = 10,

    // Performs an inquiry to the host, such as obtaining the balance on a food stamp card or gift card.
    INQUIRY = 11,

    // Activates a payment card, typically for gift card activation.
    ACTIVATE = 12,

    // Deactivates an active card account, typically for gift cards.
    DEACTIVATE = 13,

    // Adds value to a card account, typically used for gift cards.
    RELOAD = 14,

    // Void a sale transaction.
    VOID_SALE = 15,

    // Void a return transaction.
    VOID_RETURN = 16,

    // Void an authorization transaction.
    VOID_AUTH = 17,

    // Void a post-auth transaction.
    VOID_POSTAUTH = 18,

    // Void a force auth transaction.
    VOID_FORCEAUTH = 19,

    // Void a withdrawal transaction.
    VOID_WITHDRAWAL = 20,

    // Used for partial auth reversal, not all hosts support this feature.
    REVERSAL = 21,

    // Used to take money from a bank.
    WITHDRAWAL = 22,

    // Used to add value to an account, if the card is in inventory, it will activate the card and add a new account.
    ISSUE = 23,

    // Used to remove the remaining balance from the card and set the account balance to zero.
    CASHOUT = 24,

    // Used to transfer balance from one stored value account to another, typically for lost or stolen accounts.
    REPLACE = 25,

    // Same as REPLACE; used for transferring balance.
    MERGE = 26,

    // Used to change the status of an active gift card that has been reported lost or stolen.
    REPORTLOST = 27,

    // Same as SALE, typically for gift cards.
    REDEEM = 28,

    // Not supported (Status check).
    STATUS_CHECK = 29,

    // Not supported (Setup).
    SETUP = 30,

    // Not supported (Initialization).
    INIT = 31,

    // Used to verify if an account is available or to verify cardholder information.
    VERIFY = 32,

    // Used to activate a card that has been deactivated, typically for gift cards.
    REACTIVATE = 33,

    // Used to issue a card when the approved code was received from the processor.
    FORCED_ISSUE = 34,

    // Used to add value to a card when the approved code was received from the processor.
    FORCED_ADD = 35,

    // Used to decrease value from a card account, typically for gift cards.
    UNLOAD = 36,

    // Same usage as REACTIVATE, used to renew a card.
    RENEW = 37,

    // Used to request a token representing a card number, generated randomly by the host.
    TOKENIZE = 38,

    // Used to get balance from another gift system, typically for gift cards.
    GETCONVERTDETAIL = 39,

    // Used to transfer balance to a new card after obtaining details from GETCONVERTDETAIL.
    CONVERT = 40,

    // Used to increase the authorization amount.
    INCREMENTALAUTH = 41,

    // Used to lock the requested amount for a period of time on a Prepaid Closed Loop card.
    BALANCEWITHLOCK = 42,

    // Performed after a Balance Lock transaction to complete the purchase and unlock any remaining balance.
    REDEMPTIONWITHUNLOCK = 43,

    // Used when an account holder earns loyalty rewards via a stored value account.
    REWARDS = 44,

    // Used when a debit/EBT transaction was deleted out of the terminal, allowing the merchant to get paid again.
    REENTER = 45,

    // Used to modify a transaction amount and mark it for settlement, specific to TransIT systems.
    TRANSACTION_ADJUSTMENT = 46,

    // Used to transfer or disburse funds from one account to another.
    TRANSFER = 47,

    // Used in dual message host systems to finalize a transaction after authorization.
    FINALIZE = 48,

    // Used when a customer makes a cash deposit on a merchant's POS terminal.
    DEPOSIT = 49,

    // Used when a customer wants to make a payment into a credit account, commonly applied by RCS.
    ACCOUNT_PAYMENT = 50,
}


export default class ManageRequest extends NativeObject {


    constructor(requestRef?: any) {
        super(mod,requestRef);
    }

    get transType() {
        return mod.getTransType(this._nativeRef);
    }
    set transType(v: TransType) {
        mod.setTransType(this._nativeRef, v);
    }

    // EDCType
    get edcType() {
        return mod.getEdcType(this._nativeRef);
    }
    set edcType(v: EDCType) {
        mod.setEdcType(this._nativeRef, v);
    }

    // Trans
    get trans() {
        return mod.getTrans(this._nativeRef);
    }
    set trans(v: PaymentTransType) {
        mod.setTrans(this._nativeRef, v);
    }


    // Amount
    get amount() {
        return mod.getAmount(this._nativeRef);
    }
    set amount(v: string) {
        mod.setAmount(this._nativeRef, v);
    }


    // CashBackAmt
    get cashBackAmt() {
        return mod.getCashBackAmt(this._nativeRef);
    }
    set cashBackAmt(v: string) {
        mod.setCashBackAmt(this._nativeRef, v);
    }

    // MagneticSwipeEntryFlag
    get magneticSwipeEntryFlag() {
        return mod.getMagneticSwipeEntryFlag(this._nativeRef);
    }
    set magneticSwipeEntryFlag(v: string) {
        mod.setMagneticSwipeEntryFlag(this._nativeRef, v);
    }

    // ManualEntryFlag
    get manualEntryFlag() {
        return mod.getManualEntryFlag(this._nativeRef);
    }
    set manualEntryFlag(v: string) {
        mod.setManualEntryFlag(this._nativeRef, v);
    }


    // ContactlessEntryFlag
    get contactlessEntryFlag() {
        return mod.getContactlessEntryFlag(this._nativeRef);
    }
    set contactlessEntryFlag(v: string) {
        mod.setContactlessEntryFlag(this._nativeRef, v);
    }



    // ContactEMVEntryFlag
    get contactEMVEntryFlag() {
        return mod.getContactEMVEntryFlag(this._nativeRef);
    }
    set contactEMVEntryFlag(v: string) {
        mod.setContactEMVEntryFlag(this._nativeRef, v);
    }

    // FallbackSwipeEntryFlag
    get fallbackSwipeEntryFlag() {
        return mod.getFallbackSwipeEntryFlag(this._nativeRef);
    }
    set fallbackSwipeEntryFlag(v: string) {
        mod.setFallbackSwipeEntryFlag(this._nativeRef, v);
    }


    // FallbackInsertEntryFlag
    get fallbackInsertEntryFlag() {
        return mod.getFallbackInsertEntryFlag(this._nativeRef);
    }
    set fallbackInsertEntryFlag(v: string) {
        mod.setFallbackInsertEntryFlag(this._nativeRef, v);
    }


    // ScannerEntryFlag
    get scannerEntryFlag() {
        return mod.getScannerEntryFlag(this._nativeRef);
    }
    set scannerEntryFlag(v: string) {
        mod.setScannerEntryFlag(this._nativeRef, v);
    }


    // ExpiryDatePrompt
    get expiryDatePrompt() {
        return mod.getExpiryDatePrompt(this._nativeRef);
    }
    set expiryDatePrompt(v: string) {
        mod.setExpiryDatePrompt(this._nativeRef, v);
    }


    // ZipCodePrompt
    get zipCodePrompt() {
        return mod.getZipCodePrompt(this._nativeRef);
    }
    set zipCodePrompt(v: string) {
        mod.setZipCodePrompt(this._nativeRef, v);
    }

    // CVVPrompt
    get cvvPrompt() {
        return mod.getCvvPrompt(this._nativeRef);
    }
    set cvvPrompt(v: string) {
        mod.setCvvPrompt(this._nativeRef, v);
    }


    // EncryptionFlag
    get encryptionFlag() {
        return mod.getEncryptionFlag(this._nativeRef);
    }
    set encryptionFlag(v: string) {
        mod.setEncryptionFlag(this._nativeRef, v);
    }

    // KeySlot
    get keySlot() {
        return mod.getKeySlot(this._nativeRef);
    }
    set keySlot(v: string) {
        mod.setKeySlot(this._nativeRef, v);
    }

    // EmvKernelConfigurationSelection
    get emvKernelConfigurationSelection() {
        return mod.getEmvKernelConfigurationSelection(this._nativeRef);
    }
    set emvKernelConfigurationSelection(v: string) {
        mod.setEmvKernelConfigurationSelection(this._nativeRef, v);
    }

    // TransactionTime
    get transactionTime() {
        return mod.getTransactionTime(this._nativeRef);
    }
    set transactionTime(v: string) {
        mod.setTransactionTime(this._nativeRef, v);
    }

    // TransactionDate
    get transactionDate() {
        return mod.getTransactionDate(this._nativeRef);
    }
    set transactionDate(v: string) {
        mod.setTransactionDate(this._nativeRef, v);
    }

    // CurrencyCode
    /**
     * 5F2A, Transaction currency code. Default value is US dollar “840”
     */
    get currencyCode() {
        return mod.getCurrencyCode(this._nativeRef);
    }
    set currencyCode(v: string) {
        mod.setCurrencyCode(this._nativeRef, v);
    }


    // CurrencyExponent
    /**
     * 5F36: Transaction Currency Exponent 
     * Attribute: n2 CurrencyExponent "02" by default
     */
    get currencyExponent() {
        return mod.getCurrencyExponent(this._nativeRef);
    }
    set currencyExponent(v: string) {
        mod.setCurrencyExponent(this._nativeRef, v);
    }


    // MAXAccountLength
    get maxAccountLength() {
        return mod.getMaxAccountLength(this._nativeRef);
    }
    set maxAccountLength(v: string) {
        mod.setMaxAccountLength(this._nativeRef, v);
    }
    // MINAccountLength
    get minAccountLength() {
        return mod.getMinAccountLength(this._nativeRef);
    }
    set minAccountLength(v: string) {
        mod.setMinAccountLength(this._nativeRef, v);
    }
    // MerchantCategoryCode
    get merchantCategoryCode() {
        return mod.getMerchantCategoryCode(this._nativeRef);
    }
    set merchantCategoryCode(v: string) {
        mod.setMerchantCategoryCode(this._nativeRef, v);
    }
    // TagList
    get tagList() {
        return mod.getTagList(this._nativeRef);
    }
    set tagList(v: string) {
        mod.setTagList(this._nativeRef, v);
    }
    
    
    
    /**
     * Timeout for DOSIGNATURE/ GETPINBLOCK / INPUTACCOUNT/INPUTTEXT/ AUTHORIZECARD/ INPUTACCOUNTWITHEMV /SHOWTEXTBOX/SHOWDIALOG/SHOWDIALOGFORM/UPDATERESOURCE/UPDATEIMG in 100ms increments.
     */
    get timeOut() {
        return mod.getTimeOut(this._nativeRef);
    }
    set timeOut(v: string) {
        mod.setTimeOut(this._nativeRef, v);
    }

    // ExtData
    get extData() {
        return mod.getExtData(this._nativeRef);
    }
    set extData(v: string) {
        mod.setExtData(this._nativeRef, v);
    }

    // TransactionCVMLimit
    get transactionCvmLimit() {
        return mod.getTransactionCvmLimit(this._nativeRef);
    }
    set transactionCvmLimit(v: string) {
        mod.setTransactionCvmLimit(this._nativeRef, v);
    }

    // ContinuousScreen
    get continuousScreen() {
        return mod.getContinuousScreen(this._nativeRef);
    }
    set continuousScreen(v: string) {
        mod.setContinuousScreen(this._nativeRef, v);
    }
    

    // KSNFlag
    get ksnFlag() {
        return mod.getKsnFlag(this._nativeRef);
    }
    set ksnFlag(v: string) {
        mod.setKsnFlag(this._nativeRef, v);
    }
    

    // CustomData (not implemented)

    // FallbackToManualEntryFlag
    get fallbackToManualEntryFlag() {
        return mod.getFallbackToManualEntryFlag(this._nativeRef);
    }
    set fallbackToManualEntryFlag(v: string) {
        mod.setFallbackToManualEntryFlag(this._nativeRef, v);
    }

    // CustomMACInformation (not implemented)
}


export class InputAccountWithEmvRequest extends ManageRequest {
    constructor(timeout: string) {
        super();
        this.transType = TransType.INPUTACCOUNTWITHEMV
        this.timeOut = timeout;
    }
}


